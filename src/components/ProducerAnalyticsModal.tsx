import React, { useState, useEffect } from 'react';
import { X, BarChart3, DollarSign, Music, Clock, Download } from 'lucide-react';
import { supabase } from '../lib/supabase';
import jsPDF from 'jspdf';
import 'jspdf-autotable';

interface ProducerAnalyticsModalProps {
  isOpen: boolean;
  onClose: () => void;
  producerId: string;
  producerName: string;
}

interface ProducerStats {
  totalTracks: number;
  totalSales: number;
  totalRevenue: number;
  avgSyncFee: number;
  acceptanceRate: number;
  monthlyData: {
    month: string;
    sales: number;
    revenue: number;
  }[];
  topTracks: {
    title: string;
    sales: number;
    revenue: number;
  }[];
}

export function ProducerAnalyticsModal({
  isOpen,
  onClose,
  producerId,
  producerName
}: ProducerAnalyticsModalProps) {
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [stats, setStats] = useState<ProducerStats | null>(null);
  const [timeframe, setTimeframe] = useState<'7d' | '30d' | '90d' | 'all'>('30d');

  useEffect(() => {
    if (isOpen) {
      fetchProducerStats();
    }
  }, [isOpen, producerId, timeframe]);

  const generatePDF = () => {
    if (!stats) return;

    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();
    const margin = 20;
    const contentWidth = pageWidth - (margin * 2);

    // Set title
    doc.setFontSize(24);
    doc.setTextColor(75, 0, 130); // Purple color
    doc.text(`${producerName}'s Analytics Report`, pageWidth / 2, 30, { align: 'center' });

    // Set subtitle
    doc.setFontSize(12);
    doc.setTextColor(100, 100, 100);
    doc.text(`Generated on ${new Date().toLocaleDateString()}`, pageWidth / 2, 40, { align: 'center' });
    doc.text(`Timeframe: ${timeframe === 'all' ? 'All Time' : timeframe}`, pageWidth / 2, 50, { align: 'center' });

    let yPosition = 70;

    // Key Metrics Section
    doc.setFontSize(16);
    doc.setTextColor(75, 0, 130);
    doc.text('Key Metrics', margin, yPosition);
    yPosition += 10;

    doc.setFontSize(10);
    doc.setTextColor(0, 0, 0);

    // Create metrics table
    const metricsData = [
      ['Metric', 'Value'],
      ['Total Tracks', stats.totalTracks.toString()],
      ['Total Sales', stats.totalSales.toString()],
      ['Total Revenue', `$${stats.totalRevenue.toFixed(2)}`],
      ['Average Sync Fee', `$${stats.avgSyncFee.toFixed(2)}`],
      ['Acceptance Rate', `${stats.acceptanceRate.toFixed(1)}%`]
    ];

    (doc as any).autoTable({
      startY: yPosition,
      head: [metricsData[0]],
      body: metricsData.slice(1),
      theme: 'grid',
      headStyles: { fillColor: [75, 0, 130] },
      styles: { fontSize: 10 },
      margin: { left: margin, right: margin }
    });

    yPosition = (doc as any).lastAutoTable.finalY + 20;

    // Monthly Performance Section
    if (stats.monthlyData.length > 0) {
      doc.setFontSize(16);
      doc.setTextColor(75, 0, 130);
      doc.text('Monthly Performance', margin, yPosition);
      yPosition += 10;

      const monthlyTableData = [
        ['Month', 'Sales', 'Revenue']
      ];

      stats.monthlyData.forEach(month => {
        monthlyTableData.push([
          month.month,
          month.sales.toString(),
          `$${month.revenue.toFixed(2)}`
        ]);
      });

      (doc as any).autoTable({
        startY: yPosition,
        head: [monthlyTableData[0]],
        body: monthlyTableData.slice(1),
        theme: 'grid',
        headStyles: { fillColor: [75, 0, 130] },
        styles: { fontSize: 9 },
        margin: { left: margin, right: margin }
      });

      yPosition = (doc as any).lastAutoTable.finalY + 20;
    }

    // Top Performing Tracks Section
    if (stats.topTracks.length > 0) {
      doc.setFontSize(16);
      doc.setTextColor(75, 0, 130);
      doc.text('Top Performing Tracks', margin, yPosition);
      yPosition += 10;

      const tracksTableData = [
        ['Track Title', 'Sales', 'Revenue']
      ];

      stats.topTracks.forEach(track => {
        tracksTableData.push([
          track.title.length > 30 ? track.title.substring(0, 30) + '...' : track.title,
          track.sales.toString(),
          `$${track.revenue.toFixed(2)}`
        ]);
      });

      (doc as any).autoTable({
        startY: yPosition,
        head: [tracksTableData[0]],
        body: tracksTableData.slice(1),
        theme: 'grid',
        headStyles: { fillColor: [75, 0, 130] },
        styles: { fontSize: 9 },
        margin: { left: margin, right: margin }
      });
    }

    // Footer
    const footerY = pageHeight - 20;
    doc.setFontSize(8);
    doc.setTextColor(100, 100, 100);
    doc.text('Generated by MyBeatFi Analytics System', pageWidth / 2, footerY, { align: 'center' });

    // Download the PDF
    const fileName = `${producerName.replace(/[^a-zA-Z0-9]/g, '_')}_Analytics_${timeframe}_${new Date().toISOString().split('T')[0]}.pdf`;
    doc.save(fileName);
  };

  const fetchProducerStats = async () => {
    try {
      setLoading(true);
      setError(null);

      // Calculate date range
      const endDate = new Date();
      const startDate = new Date();
      if (timeframe !== 'all') {
        const days = parseInt(timeframe);
        startDate.setDate(startDate.getDate() - days);
      } else {
        startDate.setFullYear(startDate.getFullYear() - 2);
      }

      // Fetch tracks
      const { data: tracks, error: tracksError } = await supabase
        .from('tracks')
        .select('id, title')
        .eq('track_producer_id', producerId);

      if (tracksError) throw tracksError;

      // Fetch sales (track licenses)
      const { data: sales, error: salesError } = await supabase
        .from('sales')
        .select(`
          amount,
          created_at,
          track_id,
          track:tracks!inner (
            title
          )
        `)
        .eq('tracks.track_producer_id', producerId)
        .gte('created_at', startDate.toISOString())
        .lte('created_at', endDate.toISOString());

      if (salesError) throw salesError;

      // Fetch paid sync proposals for this producer's tracks
      const { data: paidSyncProposals, error: syncProposalsError } = await supabase
        .from('sync_proposals')
        .select(`
          id, 
          sync_fee,
          final_amount,
          negotiated_amount,
          created_at,
          track:tracks!inner (
            id,
            title
          )
        `)
        .in('track_id', tracks?.map(t => t.id) || [])
        .eq('payment_status', 'paid')
        .eq('status', 'accepted');

      if (syncProposalsError) throw syncProposalsError;

      // Fetch completed custom sync requests where this producer is the selected producer
      const { data: completedCustomSyncRequests, error: customSyncError } = await supabase
        .from('custom_sync_requests')
        .select(`
          id, 
          sync_fee,
          final_amount,
          negotiated_amount,
          created_at
        `)
        .eq('selected_producer_id', producerId)
        .eq('payment_status', 'paid');

      if (customSyncError) throw customSyncError;

      // Fetch all proposals for acceptance rate calculation
      const { data: allProposals, error: allProposalsError } = await supabase
        .from('sync_proposals')
        .select(`
          sync_fee,
          status,
          created_at,
          track:tracks!inner (
            id,
            track_producer_id
          )
        `)
        .eq('tracks.track_producer_id', producerId)
        .gte('created_at', startDate.toISOString())
        .lte('created_at', endDate.toISOString());

      if (allProposalsError) throw allProposalsError;

      // Calculate comprehensive stats
      const totalTracks = tracks?.length || 0;
      
      // Track sales
      const trackSalesCount = sales?.length || 0;
      const trackSalesRevenue = sales?.reduce((sum, sale) => sum + sale.amount, 0) || 0;
      
      // Sync proposals
      const syncProposalsCount = paidSyncProposals?.length || 0;
      const syncProposalsRevenue = paidSyncProposals?.reduce((sum, proposal) => sum + (proposal.final_amount || proposal.negotiated_amount || proposal.sync_fee || 0), 0) || 0;
      
      // Custom sync requests
      const customSyncCount = completedCustomSyncRequests?.length || 0;
      const customSyncRevenue = completedCustomSyncRequests?.reduce((sum, request) => sum + (request.final_amount || request.negotiated_amount || request.sync_fee || 0), 0) || 0;
      
      // Total calculations
      const totalSales = trackSalesCount + syncProposalsCount + customSyncCount;
      const totalRevenue = trackSalesRevenue + syncProposalsRevenue + customSyncRevenue;
      
      // Proposal acceptance rate
      const totalProposals = allProposals?.length || 0;
      const acceptedProposals = allProposals?.filter(p => p.status === 'accepted').length || 0;
      const avgSyncFee = allProposals?.reduce((sum, p) => sum + p.sync_fee, 0) / totalProposals || 0;
      const acceptanceRate = totalProposals > 0 ? (acceptedProposals / totalProposals) * 100 : 0;

      // Calculate monthly data including all revenue streams
      const monthlyData: Record<string, { sales: number; revenue: number }> = {};
      
      // Add track sales to monthly data
      sales?.forEach(sale => {
        const month = new Date(sale.created_at).toLocaleString('default', { month: 'short', year: 'numeric' });
        if (!monthlyData[month]) {
          monthlyData[month] = { sales: 0, revenue: 0 };
        }
        monthlyData[month].sales++;
        monthlyData[month].revenue += sale.amount;
      });
      
      // Add sync proposals to monthly data
      paidSyncProposals?.forEach(proposal => {
        const month = new Date(proposal.created_at).toLocaleString('default', { month: 'short', year: 'numeric' });
        if (!monthlyData[month]) {
          monthlyData[month] = { sales: 0, revenue: 0 };
        }
        monthlyData[month].sales++;
        monthlyData[month].revenue += (proposal.final_amount || proposal.negotiated_amount || proposal.sync_fee || 0);
      });
      
      // Add custom sync requests to monthly data
      completedCustomSyncRequests?.forEach(request => {
        const month = new Date(request.created_at).toLocaleString('default', { month: 'short', year: 'numeric' });
        if (!monthlyData[month]) {
          monthlyData[month] = { sales: 0, revenue: 0 };
        }
        monthlyData[month].sales++;
        monthlyData[month].revenue += (request.final_amount || request.negotiated_amount || request.sync_fee || 0);
      });

      // Calculate top tracks including all revenue streams
      const trackStats: Record<string, { title: string; sales: number; revenue: number }> = {};
      
      // Add track sales to track stats
      sales?.forEach(sale => {
        let trackTitle: string | undefined = undefined;
        if (sale.track) {
          if (Array.isArray(sale.track)) {
            trackTitle = (sale.track as any[])[0]?.title;
          } else {
            trackTitle = (sale.track as any).title;
          }
        }
        if (trackTitle) {
          const trackId = sale.track_id;
          if (!trackStats[trackId]) {
            trackStats[trackId] = {
              title: trackTitle,
              sales: 0,
              revenue: 0
            };
          }
          trackStats[trackId].sales++;
          trackStats[trackId].revenue += sale.amount;
        }
      });
      // Add sync proposals to track stats
      paidSyncProposals?.forEach(proposal => {
        let trackId: string | undefined = undefined;
        let trackTitle: string | undefined = undefined;
        if (proposal.track) {
          if (Array.isArray(proposal.track)) {
            trackId = (proposal.track as any[])[0]?.id;
            trackTitle = (proposal.track as any[])[0]?.title;
          } else {
            trackId = (proposal.track as any).id;
            trackTitle = (proposal.track as any).title;
          }
        }
        if (trackId && trackTitle) {
          if (!trackStats[trackId]) {
            trackStats[trackId] = {
              title: trackTitle,
              sales: 0,
              revenue: 0
            };
          }
          trackStats[trackId].sales++;
          trackStats[trackId].revenue += (proposal.final_amount || proposal.negotiated_amount || proposal.sync_fee || 0);
        }
      });

      setStats({
        totalTracks,
        totalSales,
        totalRevenue,
        avgSyncFee,
        acceptanceRate,
        monthlyData: Object.entries(monthlyData || {}).map(([month, data]) => ({
          month,
          ...data
        })),
        topTracks: Object.values(trackStats || {})
          .sort((a, b) => b.revenue - a.revenue)
          .slice(0, 5)
      });
    } catch (err) {
      console.error('Error fetching producer stats:', err);
      setError('Failed to load producer statistics');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4">
      <div className="bg-blue-900/90 backdrop-blur-md rounded-xl border border-purple-500/20 w-full max-w-4xl max-h-[90vh] overflow-hidden">
        <div className="p-6 border-b border-purple-500/20 flex justify-between items-center">
          <div>
            <h2 className="text-2xl font-bold text-white">{producerName}'s Analytics</h2>
            <p className="text-gray-400">Performance metrics and activity</p>
          </div>
          <div className="flex items-center space-x-4">
            <div className="flex space-x-2">
              {(['7d', '30d', '90d', 'all'] as const).map((period) => (
                <button
                  key={period}
                  onClick={() => setTimeframe(period)}
                  className={`px-3 py-1 rounded-lg transition-colors ${
                    timeframe === period
                      ? 'bg-purple-600 text-white'
                      : 'bg-white/5 text-gray-400 hover:bg-white/10'
                  }`}
                >
                  {period === 'all' ? 'All Time' : period}
                </button>
              ))}
            </div>
            {stats && (
              <button
                onClick={generatePDF}
                className="flex items-center space-x-2 px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors"
                title="Download PDF Report"
              >
                <Download className="w-4 h-4" />
                <span>Download PDF</span>
              </button>
            )}
            <button
              onClick={onClose}
              className="text-gray-400 hover:text-white transition-colors"
            >
              <X className="w-6 h-6" />
            </button>
          </div>
        </div>

        {error ? (
          <div className="p-6">
            <div className="p-4 bg-red-500/10 border border-red-500/20 rounded-lg">
              <p className="text-red-400 text-center">{error}</p>
            </div>
          </div>
        ) : loading ? (
          <div className="p-6 flex items-center justify-center">
            <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-purple-500"></div>
          </div>
        ) : stats && (
          <div className="p-6 space-y-6 overflow-y-auto max-h-[calc(90vh-80px)]">
            {/* Key Metrics */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
              <div className="bg-white/5 backdrop-blur-sm p-4 rounded-lg border border-purple-500/20">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-gray-400">Total Tracks</p>
                    <p className="text-2xl font-bold text-white">{stats.totalTracks}</p>
                  </div>
                  <Music className="w-8 h-8 text-purple-500" />
                </div>
              </div>

              <div className="bg-white/5 backdrop-blur-sm p-4 rounded-lg border border-purple-500/20">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-gray-400">Total Sales</p>
                    <p className="text-2xl font-bold text-white">{stats.totalSales}</p>
                  </div>
                  <BarChart3 className="w-8 h-8 text-blue-500" />
                </div>
              </div>

              <div className="bg-white/5 backdrop-blur-sm p-4 rounded-lg border border-purple-500/20">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-gray-400">Total Revenue</p>
                    <p className="text-2xl font-bold text-white">
                      ${stats.totalRevenue.toFixed(2)}
                    </p>
                  </div>
                  <DollarSign className="w-8 h-8 text-green-500" />
                </div>
              </div>

              <div className="bg-white/5 backdrop-blur-sm p-4 rounded-lg border border-purple-500/20">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-gray-400">Acceptance Rate</p>
                    <p className="text-2xl font-bold text-white">
                      {stats.acceptanceRate.toFixed(1)}%
                    </p>
                  </div>
                  <Clock className="w-8 h-8 text-yellow-500" />
                </div>
              </div>
            </div>

            {/* Monthly Revenue Chart */}
            <div className="bg-white/5 backdrop-blur-sm p-6 rounded-lg border border-purple-500/20">
              <h3 className="text-lg font-semibold text-white mb-4">Monthly Revenue</h3>
              <div className="relative h-64">
                {stats.monthlyData.map((month, index) => {
                  const maxRevenue = Math.max(...stats.monthlyData.map(m => m.revenue));
                  const height = (month.revenue / maxRevenue) * 100;
                  const width = 100 / stats.monthlyData.length;
                  const left = index * width;

                  return (
                    <div
                      key={month.month}
                      className="absolute bottom-0 bg-purple-500 rounded-t transition-all duration-300"
                      style={{
                        height: `${height}%`,
                        width: `${width - 4}%`,
                        left: `${left}%`
                      }}
                    >
                      <div className="absolute bottom-full mb-1 left-1/2 transform -translate-x-1/2 text-xs text-gray-400">
                        ${month.revenue.toFixed(0)}
                      </div>
                    </div>
                  );
                })}
              </div>
              <div className="flex justify-between mt-4 text-xs text-gray-400">
                {stats.monthlyData.map(month => (
                  <span key={month.month}>{month.month}</span>
                ))}
              </div>
            </div>

            {/* Top Tracks */}
            <div className="bg-white/5 backdrop-blur-sm p-6 rounded-lg border border-purple-500/20">
              <h3 className="text-lg font-semibold text-white mb-4">Top Performing Tracks</h3>
              <div className="space-y-4">
                {stats.topTracks.map((track, index) => (
                  <div key={index} className="flex items-center justify-between">
                    <div>
                      <p className="text-white font-medium">{track.title}</p>
                      <p className="text-sm text-gray-400">{track.sales} sales</p>
                    </div>
                    <p className="text-lg font-semibold text-white">
                      ${track.revenue.toFixed(2)}
                    </p>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
